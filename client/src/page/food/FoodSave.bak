// FoodSave.jsx

import React, {useState, useEffect} from "react";
import {useNavigate, useLocation} from "react-router-dom";
import DatePicker from "react-datepicker";
import axios from "axios";
import moment from "moment-timezone";
import {useStorage} from "../../assets/js/useStorage.jsx";
import {BiCaretLeft, BiCaretRight} from "react-icons/bi";

// ------------------------------------------------------------------------------------------------>
export const FoodSave = () => {

  // 1. common ------------------------------------------------------------------------------------>
  const URL_FOOD = process.env.REACT_APP_URL_FOOD;
  const koreanDate = moment.tz("Asia/Seoul").format("YYYY-MM-DD");
  const navParam = useNavigate();
  const location = useLocation();
  const location_date = location?.state?.date;
  const user_id = window.sessionStorage.getItem("user_id");
  const PATH = location.pathname;
  const STATE = {
    refresh:0,
    intoList:"/Food/list",
    id: "",
    date: ""
  };
  const {title, brand, serv, calories, fat, carb, protein} = location.state;

  // 2-1. useState -------------------------------------------------------------------------------->
  const {val:planYn, set:setPlanYn} = useStorage(
    `planYn(${PATH})`, "N"
  );
  const {val:planCount, set:setPlanCount} = useStorage(
    `planCount(${PATH})`, 0
  );
  const {val:realCount, set:setRealCount} = useStorage(
    `realCount(${PATH})`, 0
  );

  // 2-1. useState -------------------------------------------------------------------------------->
  const {val:strStartDate, set:setStrStartDate} = useStorage(
    `strStartDate(${PATH})`, koreanDate
  );
  const {val:strEndDate, set:setStrEndDate} = useStorage(
    `strEndDate(${PATH})`, koreanDate
  );
  const {val:strDate, set:setStrDate} = useStorage(
    `strDate(${PATH})`, location_date
  );
  const {val:strDur, set:setStrDur} = useStorage(
    `strDur(${PATH})`, `${location_date} ~ ${location_date}`
  );

  // 2-2. useState -------------------------------------------------------------------------------->
  const [showGram, setShowGram] = useState(1);
  const [category, setCategory] = useState("morning");
  const [FOOD_DEFAULT, setFOOD_DEFAULT] = useState({
    _id: "",
    food_number: 0,
    food_date: "",
    food_real : {
      food_select: "",
      food_section: [{
        food_title: "",
        food_brand: "",
        food_category: "",
        food_serv: "",
        food_calories: 0,
        food_carb: 0,
        food_protein: 0,
        food_fat: 0,
      }],
    },
    food_plan : {
      food_select: "",
      food_section: [{
        food_title: "",
        food_brand: "",
        food_category: "",
        food_serv: "",
        food_calories: 0,
        food_carb: 0,
        food_protein: 0,
        food_fat: 0,
      }],
    },
  });
  const [FOOD, setFOOD] = useState({
    _id: "",
    food_number: 0,
    food_date: "",
    food_real : {
      food_select: "",
      food_section: [{
        food_title: "",
        food_brand: "",
        food_category: "",
        food_serv: "",
        food_calories: 0,
        food_carb: 0,
        food_protein: 0,
        food_fat: 0,
      }],
    },
    food_plan : {
      food_select: "",
      food_section: [{
        food_title: "",
        food_brand: "",
        food_category: "",
        food_serv: "",
        food_calories: 0,
        food_carb: 0,
        food_protein: 0,
        food_fat: 0,
      }],
    },
  });

  // 2-3. useEffect ------------------------------------------------------------------------------->
  useEffect(() => {
    setStrDate(location_date);
    setStrDur(`${location_date} ~ ${location_date}`);
  }, [location_date]);

  // 2-3. useEffect ------------------------------------------------------------------------------->
  useEffect(() => {
    setFOOD((prev) => ({
      ...prev,
      food_date: strDur
    }));
  }, [strDur]);

  // 2.3 useEffect -------------------------------------------------------------------------------->
  useEffect(() => {(async () => {
    const response = await axios.get(`${URL_FOOD}/detail`, {
      params: {
        _id: "",
        user_id: user_id,
        food_dur: strDur,
        planYn: planYn,
      },
    });

    setPlanCount(response.data.planCount ? response.data.planCount : 0);
    setRealCount(response.data.realCount ? response.data.realCount : 0);
    setFOOD(response.data.result ? response.data.result : FOOD_DEFAULT);

  })()}, [strDur, planYn]);

  // 3. flow -------------------------------------------------------------------------------------->
  const flowFoodSave = async (params) => {
    const FOOD = {
      food_title: title,
      food_brand: brand,
      food_category: category,
      food_serv: params,
      food_calories: logicPerServing(params, calories),
      food_carb: logicPerServing(params, carb),
      food_protein: logicPerServing(params, protein),
      food_fat: logicPerServing(params, fat),
      /* foodDay: moment(foodDay).format("YYYY-MM-DD"), */
    };

    const response = await axios.post(`${URL_FOOD}/save`, {
      user_id : user_id,
      FOOD : FOOD,
    });

    if (response.data === "success") {
      alert("Save food successfully");
      navParam("/food/list");
    }
    else {
      alert(`${response.data}error`);
    }
  };

  // 4. view -------------------------------------------------------------------------------------->
  const viewFoodDay = () => {

    const calcDate = (days) => {
      const date = new Date(strDate);
      date.setDate(date.getDate() + days);
      setStrDate(moment(date).format("YYYY-MM-DD"));
    };

    return (
      <div className="d-inline-flex">
        <div onClick={() => calcDate(-1)}>
          <BiCaretLeft className="me-10 mt-10 fs-20 pointer" />
        </div>
        <DatePicker
          dateFormat="yyyy-MM-dd"
          popperPlacement="bottom"
          selected={new Date(strDate)}
          onChange={(date) => {
            setStrDate(moment(date).format("YYYY-MM-DD"));
          }}
        />
        <div onClick={() => calcDate(1)}>
          <BiCaretRight className="ms-10 mt-10 fs-20 pointer" />
        </div>
      </div>
    );
  };

  // 4-1. view ----------------------------------------------------------------------------------->
  const logicPerServing = (param, nutrientVal) => {
    return ((nutrientVal / logicOneServing()) * param).toFixed(1);
  };

  // 4-2. logic ----------------------------------------------------------------------------------->
  const logicOneServing = () => {

    const units = [
      {regex: /(g|ml)/gm, replace: ["g", "ml"], factor: 1},
      {regex: /(컵)/gm, replace: ["컵"], factor: 200},
      {regex: /(큰술|테이블스푼)/gm, replace: ["큰술", "테이블스푼"], factor: 15},
      {regex: /(작은술|스푼|티스푼)/gm, replace: ["작은술", "스푼", "티스푼"], factor: 5},
    ];

    for (const unit of units) {
      const match = serv.match(new RegExp(`(\\d+)(\\s*)(${unit.regex.source})`, "gm"));
      if (match) {
        let regexVal = match[0];
        unit.replace.forEach((index) => (regexVal = regexVal.replace(index, "")));
        return Number(regexVal) * unit.factor;
      }
    }
    return 1;
  };

  // 5. table ------------------------------------------------------------------------------------->
  const tableFoodSave = (
    servAmount, title, nutrientVal
  ) => (
    <div className="card">
      <div className="card-body">
        <h4 className="card-title">{title}</h4>
        <p className="card-text">
          <span>칼로리 : </span>
          {servAmount ? logicPerServing(servAmount, nutrientVal) : 0}
        </p>
        <p className="card-text">
          <span>지방 : </span>
          {fat ? fat : 0}
        </p>
        <p className="card-text">
          <span>탄수화물 : </span>
          {carb ? carb : 0}
        </p>
        <p className="card-text">
          <span>단백질 : </span>
          {protein ? protein : 0}
        </p>
      </div>
    </div>
  );

  // 9. button ------------------------------------------------------------------------------------>
  const buttonFoodCategory = () => {
    return (
      <select className="form-select"onChange={e => {setCategory(e.target.value);}}>
        <option value="morning">아침</option>
        <option value="lunch">점심</option>
        <option value="dinner">저녁</option>
        <option value="snack">간식</option>
      </select>
    );
  };
  const buttonFoodAmount = () => {
    return (
      <input type="number" className="form-control" defaultValue={1} min="1" onChange={e => {
          const value = Math.max(1, Number(e.target.value));
          setShowGram(value);
        }}
      />
    );
  };
  const buttonFoodSave = () => {
    return (
      <button type="button" className="btn btn-sm btn-primary" onClick={() => {
        flowFoodSave(showGram);
      }}>
        Save
      </button>
    );
  };
  const buttonRefreshPage = () => {
    return (
      <button type="button" className="btn btn-sm btn-success ms-2" onClick={() => {
        navParam(STATE.refresh);
      }}>
        Refresh
      </button>
    );
  };

  // 10. return ----------------------------------------------------------------------------------->
  return (
    <div className="root-wrapper">
      <div className="container-wrapper">
        <div className="row d-center mt-5">
          <div className="col-12">
            <h1 className="mb-3">
              <p>{title}</p>
              <p>{brand}</p>
            </h1>
          </div>
        </div>
        <div className="row d-center mt-5">
          <div className="col-12">
            <h1 className="mb-3 fw-5">
              <span>{viewFoodDay()}</span>
            </h1>
          </div>
        </div>
        <div className="row d-center mt-5">
          <div className="col-6">
            {tableFoodSave(0, serv ? serv : "0", calories)}
          </div>
          <div className="col-6">
            {tableFoodSave(showGram, showGram.toString(), calories)}
          </div>
          <div className="col-6">
            <div className="input-group">
              {buttonFoodCategory()}
              {buttonFoodAmount()}
            </div>
          </div>
        </div>
        <div className="row d-center mb-20">
          <div className="col-12">
            {buttonFoodSave()}
            {buttonRefreshPage()}
          </div>
        </div>
      </div>
    </div>
  );
};