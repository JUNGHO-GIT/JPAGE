const { CracoAliasPlugin } = require('react-app-alias');
const CompressionPlugin = require('compression-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const ImageMinimizerPlugin = require('image-minimizer-webpack-plugin');
const { SwcMinifyWebpackPlugin } = require('swc-minify-webpack-plugin');
const webpack = require('webpack');

module.exports = {
  plugins: [
    { plugin: CracoAliasPlugin },
  ],

  devServer: {
    compress: true,
    hot: true,
  },

  babel: {
    plugins: [
      ['@babel/plugin-syntax-dynamic-import'],
      ['@babel/plugin-transform-react-inline-elements'],
      ['@babel/plugin-transform-react-constant-elements'],
      ['@babel/plugin-proposal-optional-chaining'],
      ['@babel/plugin-proposal-nullish-coalescing-operator'],
      ['babel-plugin-transform-remove-console', { exclude: ['error', 'warn'] }],
    ]
  },

  webpack: {
    configure: (webpackConfig, { env }) => {
      if (env === 'production') {
        webpackConfig.optimization = {
          minimize: true,
          minimizer: [
            new SwcMinifyWebpackPlugin({
              compress: {
                drop_console: true,
                drop_debugger: true,
              },
              mangle: {
                properties: {
                  regex: '^_',
                },
              },
            }),
            new CssMinimizerPlugin(),
          ],
          splitChunks: {
            chunks: 'all',
          },
          runtimeChunk: 'single',
        };

        webpackConfig.plugins.push(
          new CompressionPlugin({
            test: /\.(js|css|html|svg)$/,
            algorithm: 'gzip',
            threshold: 8192,
          }),
          new ImageMinimizerPlugin({
            minimizer: {
              implementation: ImageMinimizerPlugin.imageminMinify,
              options: {
                plugins: [
                  ['gifsicle', { interlaced: true }],
                  ['mozjpeg', { progressive: true, quality: 75 }],
                  ['optipng', { optimizationLevel: 5 }],
                  ['pngquant', { quality: [0.65, 0.9], speed: 4 }],
                  ['svgo', { plugins: [{ removeViewBox: false }] }],
                ],
              },
            },
          }),
          new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(env),
          })
        );

        webpackConfig.output = {
          path: `${__dirname}/build`,
          filename: 'static/js/[name].[contenthash:8].js',
          chunkFilename: 'static/js/[name].[contenthash:8].chunk.js',
          clean: true,
        };
      }

      return webpackConfig;
    },
  },
};
